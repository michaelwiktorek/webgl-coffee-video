(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Graphics, g, start_video, stop_video;

Graphics = require("./gl_util.coffee");

g = null;

window.onload = function() {
  var canvas;
  canvas = document.querySelector('#glcanvas');
  g = new Graphics(canvas);
  document.querySelector('#start_video').onclick = start_video;
  return document.querySelector('#stop_video').onclick = stop_video;
};

start_video = function() {
  return g.start_video();
};

stop_video = function() {
  var vid;
  vid = document.querySelector('video');
  vid.src = '';
  return g.stop_video();
};



},{"./gl_util.coffee":2}],2:[function(require,module,exports){
var Graphics,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Graphics = (function() {
  Graphics.anim_id = null;

  Graphics.gl = null;

  Graphics.buffer = null;

  Graphics.program = null;

  Graphics.vid_stream = null;

  Graphics.texture = null;

  Graphics.video = false;

  Graphics.positionLocation = null;

  Graphics.img = null;

  Graphics.vid = null;

  function Graphics(canvas) {
    this.stop_video = bind(this.stop_video, this);
    this.start_video = bind(this.start_video, this);
    this.init_video = bind(this.init_video, this);
    this.render = bind(this.render, this);
    this.init = bind(this.init, this);
    this.gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    this.img = new Image();
    this.img.src = "../img/internetsurf.jpg";
  }

  Graphics.prototype.init = function() {
    console.log("init");
    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT);
    this.init_shaders();
    return this.anim_id = window.requestAnimationFrame(this.render);
  };

  Graphics.prototype.render = function() {
    this.anim_id = window.requestAnimationFrame(this.render);
    if (this.video) {
      this.update_texture();
      return this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
    }
  };

  Graphics.prototype.init_shaders = function() {
    var buffer, fragmentShader, positionLocation, resolutionLocation, shaderScript, shaderSource, texCoordBuffer, texCoordLocation, textureSizeLocation, vertexShader;
    shaderScript = document.querySelector("#vert-shader");
    shaderSource = shaderScript.text;
    vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);
    this.gl.shaderSource(vertexShader, shaderSource);
    this.gl.compileShader(vertexShader);
    shaderScript = document.querySelector("#frag-shader");
    shaderSource = shaderScript.text;
    fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);
    this.gl.shaderSource(fragmentShader, shaderSource);
    this.gl.compileShader(fragmentShader);
    console.log(this.gl.getShaderInfoLog(fragmentShader));
    this.program = this.gl.createProgram();
    this.gl.attachShader(this.program, vertexShader);
    this.gl.attachShader(this.program, fragmentShader);
    this.gl.linkProgram(this.program);
    this.gl.useProgram(this.program);
    texCoordLocation = this.gl.getAttribLocation(this.program, "a_texCoord");
    positionLocation = this.gl.getAttribLocation(this.program, "a_position");
    texCoordBuffer = this.gl.createBuffer();
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, texCoordBuffer);
    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), this.gl.STATIC_DRAW);
    this.gl.enableVertexAttribArray(texCoordLocation);
    this.gl.vertexAttribPointer(texCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
    this.init_textures();
    resolutionLocation = this.gl.getUniformLocation(this.program, "u_resolution");
    this.gl.uniform2f(resolutionLocation, 640, 480);
    buffer = this.gl.createBuffer();
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);
    this.gl.enableVertexAttribArray(positionLocation);
    this.gl.vertexAttribPointer(positionLocation, 2, this.gl.FLOAT, false, 0, 0);
    textureSizeLocation = this.gl.getUniformLocation(this.program, "u_textureSize");
    this.gl.uniform2f(textureSizeLocation, 640, 480);
    return this.setRectangle(0, 0, 640, 480);
  };

  Graphics.prototype.setRectangle = function(x, y, width, height) {
    var x2, y2;
    x2 = x + width;
    y2 = y + height;
    return this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([x, y, x2, y, x, y2, x, y2, x2, y, x2, y2]), this.gl.STATIC_DRAW);
  };

  Graphics.prototype.init_video = function() {
    if (this.vid) {
      this.vid.src = this.vid_stream;
      return this.anim_id = window.requestAnimationFrame(this.render);
    } else {
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      this.vid = document.querySelector('video');
      navigator.getUserMedia({
        video: true,
        audio: false
      }, (function(_this) {
        return function(stream) {
          _this.vid_stream = window.URL.createObjectURL(stream);
          return _this.vid.src = _this.vid_stream;
        };
      })(this), function() {
        return alert("error");
      });
      return this.init();
    }
  };

  Graphics.prototype.init_textures = function() {
    this.texture = this.gl.createTexture();
    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
    return this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
  };

  Graphics.prototype.update_texture = function() {
    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
    return this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.vid);
  };

  Graphics.prototype.start_video = function() {
    if (!this.video) {
      this.init_video();
      return this.video = true;
    }
  };

  Graphics.prototype.stop_video = function() {
    window.cancelAnimationFrame(this.anim_id);
    this.video = false;
    this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
    return this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  };

  return Graphics;

})();

module.exports = Graphics;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
